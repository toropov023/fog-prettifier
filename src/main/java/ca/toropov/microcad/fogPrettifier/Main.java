package ca.toropov.microcad.fogPrettifier;

import ca.toropov.microcad.fogPrettifier.util.EmailSender;
import ca.toropov.microcad.fogPrettifier.util.LenovoLookup;
import ca.toropov.microcad.fogPrettifier.util.ThreadUtil;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.binding.Bindings;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Author: toropov
 * Date: 9/28/2018
 */
public class Main extends Application {
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private Stage primaryStage;
    private GridPane grid;
    private Text infoText;
    private Button fileBtn;
    private TableView<FogSummary.Row> tableView;
    private Label groupNameLabel;
    private TextField groupNameField;
    private Label poLabel;
    private TextField poField;
    private Button emailBtn;
    private Text emailStatus;
    private String fileName;

    private GridPane emailsGrid;
    private List<TextField> emailFields = new ArrayList<>();

    public static void main(String[] args) {
        LenovoLookup.init();

        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;

        grid = new GridPane();
        grid.setAlignment(Pos.TOP_CENTER);
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 20, 20, 20));

        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select FOG generated report");
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("CSV files (*.csv)", "*.csv"));
        fileChooser.setInitialDirectory(new File(System.getProperty("user.home") + "/Downloads/"));

        infoText = new Text("  This program will prettify the incoming report generated by FOG");
        infoText.setFont(Font.font("Tahoma", FontWeight.NORMAL, 14));
        infoText.setFill(Color.DIMGRAY);
        infoText.setTextAlignment(TextAlignment.JUSTIFY);
        grid.add(infoText, 0, 0, 2, 4);

        Text statusText = new Text();
        statusText.setFont(Font.font("Tahoma", FontWeight.BOLD, 12));
        statusText.setFill(Color.GRAY);
        statusText.setTextAlignment(TextAlignment.RIGHT);
        grid.add(statusText, 0, 7, 2, 1);

        fileBtn = new Button("Choose file...");
        fileBtn.setOnAction(event -> {
            resizeWindow(300, 160);
            tableView.setVisible(false);
            statusText.setText("");
            File file = fileChooser.showOpenDialog(primaryStage);
            if (file != null) {
                resizeWindow(300, 200);
                fileBtn.setDisable(true);

                fileName = file.getName().replace(".csv", "");
                if (fileName.equals("FogReport")) {
                    fileName = null;
                }

                Prettifier.prettify(file,
                        (status, color) -> Platform.runLater(() -> {
                            statusText.setText(status);
                            statusText.setFill(color);
                        }),
                        (summary) -> {
                            fileBtn.setDisable(false);

                            if (summary != null) {
                                displaySummary(summary);
                            }
                        });
            }
        });
        HBox hBox = new HBox(fileBtn);
        hBox.setAlignment(Pos.CENTER);
        grid.add(hBox, 0, 5, 2, 1);

        primaryStage.setTitle("Fog Report Prettifier");
        primaryStage.getIcons().add(new Image(Main.class.getResourceAsStream("/icons/256.png")));
        primaryStage.setScene(new Scene(grid, 300, 160));
        primaryStage.setMinWidth(300);
        resizeWindow(300, 160);
        primaryStage.show();


        //Setup table view
        tableView = new TableView<>();
        TableColumn<FogSummary.Row, String> modelCol = new TableColumn<>("Model");
        modelCol.setCellValueFactory(new PropertyValueFactory<>("model"));
        TableColumn<FogSummary.Row, Integer> aCol = new TableColumn<>("A grades");
        aCol.setCellValueFactory(new PropertyValueFactory<>("aGrades"));
        TableColumn<FogSummary.Row, Integer> bCol = new TableColumn<>("B grades");
        bCol.setCellValueFactory(new PropertyValueFactory<>("bGrades"));
        TableColumn<FogSummary.Row, Integer> cCol = new TableColumn<>("C grades");
        cCol.setCellValueFactory(new PropertyValueFactory<>("cGrades"));
        TableColumn<FogSummary.Row, Integer> totalCol = new TableColumn<>("Total");
        totalCol.setCellValueFactory(new PropertyValueFactory<>("total"));
        tableView.getColumns().addAll(modelCol, aCol, bCol, cCol, totalCol);
        tableView.setFixedCellSize(20);
        tableView.setVisible(false);
        grid.add(tableView, 0, 8, 2, 1);

        //Email options
        groupNameLabel = new Label("Group name:");
        groupNameField = new TextField();
        groupNameField.setPromptText("Ex: " + dateFormat.format(new Date()) + " Grace");
        groupNameLabel.setVisible(false);
        groupNameField.setVisible(false);
        grid.add(groupNameLabel, 0, 9);
        grid.add(groupNameField, 1, 9);

        poLabel = new Label("PO number:");
        poField = new TextField();
        poField.setPromptText("Optional");
        poLabel.setVisible(false);
        poField.setVisible(false);
        grid.add(poLabel, 0, 10);
        grid.add(poField, 1, 10);

        emailBtn = new Button("Send email");
        emailBtn.setVisible(false);
        HBox hBox2 = new HBox(emailBtn);
        hBox2.setAlignment(Pos.CENTER);
        grid.add(hBox2, 0, 11, 2, 1);

        grid.add(new Label("Email recipients:"), 0, 12);

        emailsGrid = new GridPane();
        emailsGrid.setHgap(10);
        emailsGrid.setVgap(10);
        grid.add(emailsGrid, 0, 13, 2, 1);

        emailStatus = new Text();
        emailStatus.setFont(Font.font("Tahoma", FontWeight.BOLD, 12));
        emailStatus.setVisible(false);
        grid.add(emailStatus, 0, 14, 2, 1);
    }

    private void displaySummary(FogSummary summary) {
        tableView.setVisible(true);
        ObservableList<FogSummary.Row> rows = summary.generateSummary();
        resizeWindow(500, 360 + (rows.size() * 20));

        updateEmails(400 + (rows.size() * 20));

        tableView.setItems(rows);
        tableView.prefHeightProperty().bind(Bindings.size(tableView.getItems()).multiply(tableView.getFixedCellSize()).add(30));
        tableView.requestFocus();

        groupNameLabel.setVisible(true);
        groupNameField.setVisible(true);
        poLabel.setVisible(true);
        poField.setVisible(true);
        emailBtn.setVisible(true);

        if (fileName != null) {
            groupNameField.setText(fileName);
        }

        emailBtn.setOnAction(event -> {
            if (groupNameField.getCharacters().length() < 1) {
                emailStatus.setVisible(true);
                emailStatus.setText("Group name is required");
                emailStatus.setFill(Color.RED);
            } else if (getEmails().isEmpty()) {
                emailStatus.setVisible(true);
                emailStatus.setText("At least one email is required");
                emailStatus.setFill(Color.RED);
            } else {
                emailBtn.setDisable(true);
                fileBtn.setDisable(true);
                groupNameField.setDisable(true);
                poField.setDisable(true);
                emailFields.forEach(f -> f.setDisable(true));
                fileBtn.setDisable(true);
                tableView.setDisable(true);

                emailStatus.setVisible(true);
                emailStatus.setText("Sending...");
                emailStatus.setFill(Color.GRAY);

                saveEmails();

                ThreadUtil.onNewThread(() -> {
                    boolean success = EmailSender.send(summary, groupNameField.getCharacters().toString(), poField.getCharacters().toString(), getEmails());
                    Platform.runLater(() -> {
                        emailStatus.setText(success ? "Sent!" : "Error! Check emails");
                        emailStatus.setFill(success ? Color.GREEN : Color.RED);
                        fileBtn.setDisable(!success);
                        emailBtn.setDisable(success);
                        emailFields.forEach(f -> f.setDisable(success));
                    });
                });
            }
        });
    }

    private void resizeWindow(int width, int height) {
        primaryStage.setWidth(width);
        primaryStage.setMinWidth(width);
        primaryStage.setHeight(height);
        primaryStage.setMinHeight(height);

        infoText.setWrappingWidth(width - 50);
    }

    private void updateEmails(int minHeight) {
        List<String> loadedEmails = new ArrayList<>();
        File emailsFile = new File(System.getProperty("user.home") + "/Documents/fogPrettifier/.emails");
        emailsFile.getParentFile().mkdirs();
        if (!emailsFile.exists()) {
            try {
                emailsFile.createNewFile();

            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(emailsFile))) {
            String email;
            while ((email = reader.readLine()) != null) {
                loadedEmails.add(email);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        emailFields.clear();
        emailsGrid.getChildren().clear();
        int rows = 1 + (loadedEmails.size() == 0 ? 0 : (loadedEmails.size() - 1) / 3);
        for (int i = 0; i < rows * 3; i++) {
            TextField field = new TextField(i < loadedEmails.size() ? loadedEmails.get(i) : "");
            field.setOnKeyTyped(event -> checkEmailFields());
            emailFields.add(field);
            emailsGrid.add(field, i % 3, i / 3);
        }

        resizeWindow(500, minHeight + (rows / 3 * 40));
    }

    private void checkEmailFields() {
        int total = emailFields.size();
        int empty = total - getEmails().size();
        if (empty > 3) {
            int removed = 0;
            for (int i = emailFields.size() - 1; i >= 0 && removed < 3; i--) {
                TextField field = emailFields.get(i);
                if (field.getText().isEmpty()) {
                    emailFields.remove(i);
                    removed++;
                }
            }

            emailsGrid.getChildren().clear();
            for (int i = 0; i < emailFields.size(); i++) {
                emailsGrid.add(emailFields.get(i), i % 3, i / 3);
            }
        } else if (empty == 0) {
            for (int i = 0; i < 3; i++) {
                TextField field = new TextField();
                field.setOnKeyTyped(event -> checkEmailFields());
                emailFields.add(field);
                emailsGrid.add(field, i % 3, (total + i) / 3);
            }
        }
    }

    private List<String> getEmails() {
        return emailFields.stream().filter(f -> !f.getText().isEmpty()).map(TextInputControl::getText).collect(Collectors.toList());
    }

    private void saveEmails() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(System.getProperty("user.home") + "/Documents/fogPrettifier/.emails"))) {
            for (String email : getEmails()) {
                writer.write(email);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
